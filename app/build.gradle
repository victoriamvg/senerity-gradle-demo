/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.8/userguide/building_java_projects.html in the Gradle documentation.
 */
buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()  // Añade esto para permitir que Gradle busque plugins
    }
    dependencies {
        classpath "net.serenity-bdd:serenity-gradle-plugin:3.0.5" // O usa la versión que prefieras
    }
}

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'net.serenity-bdd.serenity-gradle-plugin' version '4.1.14'// Versión de Serenity actual (cambiar según sea necesario)
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
     maven {
        url "https://repo.maven.apache.org/maven2"
    }
    maven {
        url "https://plugins.gradle.org/m2/"
    }
    gradlePluginPortal()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation libs.guava

    // Dependencias de Serenity
    testImplementation 'net.serenity-bdd:serenity-core:4.1.14'
    implementation 'net.serenity-bdd:serenity-junit:4.1.14'
    
    // Si usas Cucumber
    implementation 'net.serenity-bdd:serenity-cucumber:4.1.14' 

    // Dependencias de Selenium
    implementation 'org.seleniumhq.selenium:selenium-java:4.0.0' // Versión reciente de Selenium

    // JUnit para pruebas
    testImplementation 'junit:junit:4.13.2'

    // Otras dependencias útiles
    testImplementation 'org.assertj:assertj-core:3.19.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'

    
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'selenium.serenity.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks.withType(Test) {
    useJUnit()
}
